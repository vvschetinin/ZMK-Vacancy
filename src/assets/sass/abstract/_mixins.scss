
@mixin media($max-width){
  $screen-width: str-replace($max-width + '', 'px');
  @media screen and (max-width: #{$screen-width}px) {
    @content;
  }
}

@mixin minMedia($min-width){
  $screen-width: str-replace($min-width + '', 'px');
  @media screen and (min-width: #{$screen-width}px) {
    @content;
  }
}

@mixin placeholderColor($color){
  ::-webkit-input-placeholder {color:$color;}
  ::-moz-placeholder          {color:$color;}/* Firefox 19+ */
  :-moz-placeholder           {color:$color;}/* Firefox 18- */
  :-ms-input-placeholder      {color:$color;}
}

@mixin square($size: 1em) {
  width: $size;
  height: $size;
}

@mixin generate_styles($styles) {
  @each $class_name, $style_names in $styles {
    #{$class_name} {
      @each $style_name, $style_value in $style_names {
        #{$style_name}: #{$style_value};
      }
    }
  }

  @each $bp, $val in $grid-breakpoints {
    @if $bp != 'xs' {
      @each $class_name, $style_names in $styles {
        #{$class_name}--#{$bp} {
          @include minMedia($val) {
            @each $style_name, $style_value in $style_names {
              #{$style_name}: #{$style_value};
            }
          }
        }
      }
    }
  }
}

@mixin generate_bp_content() {
  @content;
  @each $bp, $val in $grid-breakpoints {
    @if $bp != 'xs' {
      &--#{$bp} {
        @include minMedia($val) {
          @content;
        }
      }
    }
  }
}

/* stylelint-disable */
@mixin font-face($font-family, $url, $format, $weight, $style) {
  @font-face {
    font-family: "#{$font-family}";
    src: url('../fonts/#{$url}') format("#{$format}");
    font-weight: #{$weight};
    font-display: swap;
    font-style: $style;
  }
}
